/*------------------------------------*\
  #NUDGE
\*------------------------------------*/

@if ($nudge-no-ids == true) {

/**
 * Use of IDs.
 *
 * IDs in CSS are a BadIdea™, so display a warning if one is detected. Mark as a
 * warn and not an error because IDs are still allowed in HTML and JS.
 */
[id] {
  @include _nudge-message('warn');

  &:after {
    content: "WARN: Do not use IDs in CSS.";
  }

}

} //endif





@if ($nudge-single-spaces == true) {

/**
 * Single-Space Delimited Class Attributes
 */
[class*=" "] {
  @include _nudge-message('warn');

  &:after {
    content: "WARN: Prefer double spaces between class names.";
  }

}

[class*="  "] {
  @include _nudge-pass();
}

} //endif





@if ($nudge-modifiers == true) {

/**
 * Improper Use of BEM Modifiers.
 *
 * By checking whether a class attribute contains two hyphens but no  space
 * (i.e. there’s only one class and it’s a Modifier), tell the developer that
 * they can’t use a Modifier without a corresponding Block.
 *
 * N.B. This isn’t bulletproof: `class="foo--bar baz"` would pass, as would
 *      `class=" foo--bar"`. Use with a pinch of salt.
 */
[class*="--"]:not([class*=" "]) {
  @include _nudge-message();
    
  &:after {
    content: "ERROR: Cannot have a Modifier (i.e. `." attr(class) "`) without a Block.";
  }

}

} //endif






@if ($nudge-underscores == true) {

/**
 * Underscores as Delimiters
 *
 * We should not be using single underscores in our classes. Mark as a warn and
 * not an error because we could be dealing with third party code that we have
 * no control over.
 */
[class*="_"] {
  @include _nudge-message('warn');

  &:after {
    content: "WARN: Do not use underscores to delimit strings";
  }

}

[class*="__"] {
  @include _nudge-pass();
}

} //endif





@if ($nudge-camel-case == true) {

/**
 * Use of Camel Case
 *
 * We don’t want developers using camel case classes. Detect if the class
 * contains a capital letter and show a warning. Mark as a warn and not an error
 * because we could be dealing with third party code that we have no control
 * over.
 */

$_nudge-alphabet: ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');

%_nudge-camel-case-shared-styles {
  @include _nudge-message('warn');

  &:after {
    content: "WARN: Do not use camelCase in class names.";
  }

}

@each $letter in $_nudge-alphabet {
  [class*="#{$letter}"] {
    @extend %_nudge-camel-case-shared-styles;
  }
}

} //endif






@if ($nudge-deprecated-selectors == true) {

/**
 * Deprecated Selectors
 *
 * Sometimes we will want to deprecate and/or phase out certain selectors.
 * We can define a list of these selectors (with optional replacements)
 * that will display a warning in the UI when used.
 */
// Array of our selectors and their replacements. If there is no replacement,
// use `null`.
//
// The array below is an example: do not modify it directly. Instead, replicate
// it elsewhere earlier in the project (e.g. in a `_settings.deprecations.scss`
// file).

$nudge-deprecated-selectors-list: (
  '.deprecated-class': '.replacement-class',
  '.deprecated-class-with-no-replaement': null,
) !default;

%_nudge-deprecated-selectors-shared-styles {
  @include _nudge-message('warn');
}

@each $selector, $replacement in $nudge-deprecated-selectors-list {
  #{$selector} {
    @extend %_nudge-deprecated-selectors-shared-styles;

  &:after {
    @if ($replacement != null) {
      content: "WARN: Selector `#{$selector}` is deprecated, use `#{$replacement}` instead.";
    } @else {
      content: "WARN: Selector `#{$selector}` is deprecated.";
    }
  }

  }
}

} //endif
